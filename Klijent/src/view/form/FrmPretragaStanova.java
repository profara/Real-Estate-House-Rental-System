/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view.form;

import view.components.GhostText;
import domen.Lokacija;
import domen.Stan;
import domen.pomocni.KriterijumiStan;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import kontroler.Kontroler;
import modeliTabele.TableModelStan;

/**
 *
 * @author Alek
 */
public class FrmPretragaStanova extends javax.swing.JDialog {

    private List<Stan> stanovi;
    private Frame parent;

    /**
     * Creates new form PretragaStaova
     */
    public FrmPretragaStanova(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
        setLocationRelativeTo(parent);
        try {
            srediFormu();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error in view initialization: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStanovi = new javax.swing.JTable();
        lblKvadratura = new javax.swing.JLabel();
        txtMinKv = new javax.swing.JTextField();
        txtMaxKv = new javax.swing.JTextField();
        lblErrKvadratura = new javax.swing.JLabel();
        lblPretraziPoBrSoba = new javax.swing.JLabel();
        txtMaxSoba = new javax.swing.JTextField();
        txtMinSoba = new javax.swing.JTextField();
        lblErrBrSoba = new javax.swing.JLabel();
        lblPretraziPoSpratu = new javax.swing.JLabel();
        txtMinSprat = new javax.swing.JTextField();
        txtMaxSprat = new javax.swing.JTextField();
        lblErrSprat = new javax.swing.JLabel();
        lblPretraziPoLokaciju = new javax.swing.JLabel();
        cmbLokacija = new javax.swing.JComboBox<>();
        btnIzmeni = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        btnPretrazi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pretrazi stanove");

        tblStanovi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStanovi);

        lblKvadratura.setText("Pretrazi po kvadraturi:");

        lblErrKvadratura.setForeground(new java.awt.Color(255, 0, 0));
        lblErrKvadratura.setText("jLabel1");

        lblPretraziPoBrSoba.setText("Pretrazi po broju soba:");

        lblErrBrSoba.setForeground(new java.awt.Color(255, 0, 0));
        lblErrBrSoba.setText("jLabel1");

        lblPretraziPoSpratu.setText("Pretrazi po spratu:");

        lblErrSprat.setForeground(new java.awt.Color(255, 0, 0));
        lblErrSprat.setText("jLabel1");

        lblPretraziPoLokaciju.setText("Pretrazi po lokaciji:");

        cmbLokacija.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnPretrazi.setText("Pretrazi");
        btnPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIzmeni, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblKvadratura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPretraziPoBrSoba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPretraziPoSpratu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtMinKv, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMinSoba, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMinSprat, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 54, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMaxKv, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMaxSoba, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMaxSprat, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnPretrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPretraziPoLokaciju, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(30, 30, 30)
                                        .addComponent(cmbLokacija, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblErrBrSoba, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblErrSprat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblErrKvadratura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblKvadratura, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxKv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMinKv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblErrKvadratura)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPretraziPoBrSoba)
                            .addComponent(txtMinSoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(lblErrBrSoba)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPretraziPoSpratu)
                            .addComponent(txtMinSprat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSprat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(lblErrSprat)
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPretraziPoLokaciju)
                            .addComponent(cmbLokacija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnPretrazi)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnIzmeni)
                            .addComponent(btnObrisi))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int selected = tblStanovi.getSelectedRow();

        if (selected != -1) {
            Stan stan = stanovi.get(selected);
            try {
                Kontroler.getInstance().obrisiStan(stan);
                osveziTabelu(selected);
                JOptionPane.showMessageDialog(this, "Uspesno obrisan stan!", "Potvrda", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Neuspesno brisanje stana!", "Greska", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Morate odabrati stan!", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziActionPerformed
        try {
            validacija();
            int minKv = Integer.MIN_VALUE;
            int maxKv = Integer.MAX_VALUE;
            int minSoba = Integer.MIN_VALUE;
            int maxSoba = Integer.MAX_VALUE;
            int minSprat = Integer.MIN_VALUE;
            int maxSprat = Integer.MAX_VALUE;

            if (!txtMinKv.getText().equals("min")) {
                minKv = Integer.parseInt(txtMinKv.getText().trim());
            }

            if (!txtMaxKv.getText().equals("max")) {
                maxKv = Integer.parseInt(txtMaxKv.getText().trim());
            }

            if (!txtMinSoba.getText().equals("od")) {
                minSoba = Integer.parseInt(txtMinSoba.getText().trim());
            }

            if (!txtMaxSoba.getText().equals("do")) {
                maxSoba = Integer.parseInt(txtMaxSoba.getText().trim());
            }

            if (!txtMinSprat.getText().equals("od")) {
                minSprat = Integer.parseInt(txtMinSprat.getText().trim());
            }

            if (!txtMaxSprat.getText().equals("do")) {
                maxSprat = Integer.parseInt(txtMaxSprat.getText().trim());
            }

            Lokacija lokacija = (Lokacija) cmbLokacija.getSelectedItem();

            Stan stanMin = new Stan(minKv, minSoba, minSprat, lokacija);
            Stan stanMax = new Stan(maxKv, maxSoba, maxSprat, lokacija);

            KriterijumiStan ks = new KriterijumiStan(stanMin, stanMax);

            List<Stan> pretrazeniStanovi = Kontroler.getInstance().pretraziStanove(ks);

            stanovi = pretrazeniStanovi;

            TableModelStan tms = (TableModelStan) tblStanovi.getModel();
            tms.setStanovi(pretrazeniStanovi);
            tms.fireTableDataChanged();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPretraziActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        int selected = tblStanovi.getSelectedRow();

        if (selected != -1) {
            Stan stan = stanovi.get(selected);
            FrmIzmenaStana fiz = new FrmIzmenaStana(parent, true, stan);
            fiz.setVisible(true);
            osveziTabelu();
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPretrazi;
    private javax.swing.JComboBox<Object> cmbLokacija;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblErrBrSoba;
    private javax.swing.JLabel lblErrKvadratura;
    private javax.swing.JLabel lblErrSprat;
    private javax.swing.JLabel lblKvadratura;
    private javax.swing.JLabel lblPretraziPoBrSoba;
    private javax.swing.JLabel lblPretraziPoLokaciju;
    private javax.swing.JLabel lblPretraziPoSpratu;
    private javax.swing.JTable tblStanovi;
    private javax.swing.JTextField txtMaxKv;
    private javax.swing.JTextField txtMaxSoba;
    private javax.swing.JTextField txtMaxSprat;
    private javax.swing.JTextField txtMinKv;
    private javax.swing.JTextField txtMinSoba;
    private javax.swing.JTextField txtMinSprat;
    // End of variables declaration//GEN-END:variables

    private void srediFormu() throws Exception {
        postaviModel();
        new GhostText(txtMinKv, "min");
        new GhostText(txtMaxKv, "max");
        new GhostText(txtMinSoba, "od");
        new GhostText(txtMaxSoba, "do");
        new GhostText(txtMinSprat, "od");
        new GhostText(txtMaxSprat, "do");
        lblErrKvadratura.setVisible(false);
        lblErrBrSoba.setVisible(false);
        lblErrSprat.setVisible(false);

        ucitajCombo();
    }

    private void ucitajCombo() throws Exception {
        cmbLokacija.removeAllItems();

        List<Lokacija> lokacije = Kontroler.getInstance().getLokacije();
        for (Lokacija lokacija : lokacije) {
            cmbLokacija.addItem(lokacija);
        }
        System.out.println("Uspesno ucitane lokacije");

    }

    private void postaviModel() throws Exception {

        stanovi = new ArrayList<>();

        stanovi = Kontroler.getInstance().getStanovi();
        System.out.println("Uspesno ucitana lista Stanova");

        TableModelStan tms = new TableModelStan(stanovi);
        tblStanovi.setModel(tms);

    }

    private void osveziTabelu(int index) {
        TableModelStan tms = (TableModelStan) tblStanovi.getModel();
        tms.getStanovi().remove(index);
        tms.fireTableDataChanged();
    }

    private void validacija() throws Exception {
        String errorMessage = "";

        if (!txtMinKv.getText().equals("min")) {
            int min = Integer.parseInt(txtMinKv.getText().trim());
            if (min < 0) {
                errorMessage += "Kvadratura ne moze biti negativna!";
                lblErrKvadratura.setVisible(true);
                lblErrKvadratura.setText("Kvadratura ne moze biti negativna!");
            }
        }

        if (!txtMaxKv.getText().equals("max")) {
            int max = Integer.parseInt(txtMaxKv.getText().trim());
            if (max < 0) {
                errorMessage += "Kvadratura ne moze biti negativna!";
                lblErrKvadratura.setVisible(true);
                lblErrKvadratura.setText("Kvadratura ne moze biti negativna!");
            }
        }

        if (!txtMinKv.getText().equals("min") && !txtMaxKv.getText().equals("max")) {
            int min = Integer.parseInt(txtMinKv.getText().trim());
            int max = Integer.parseInt(txtMaxKv.getText().trim());
            if (min > max) {
                errorMessage += "Minimalna kvadratura mora biti manja od maksimalne!\n";
                lblErrKvadratura.setVisible(true);
                lblErrKvadratura.setText("Minimalna kvadratura mora biti manja od maksimalne!");
            }
        }

        if (!txtMinSoba.getText().equals("od") && !txtMaxSoba.getText().equals("do")) {
            int min = Integer.parseInt(txtMinSoba.getText().trim());
            int max = Integer.parseInt(txtMaxSoba.getText().trim());
            if (min > max) {
                errorMessage += "Minimalan broj soba mora biti manji od maksimalnog!\n";
                lblErrBrSoba.setVisible(true);
                lblErrBrSoba.setText("Minimalan broj soba mora biti manji od maksimalnog!");
            }
        }

        if (!txtMinSoba.getText().equals("od")) {
            int min = Integer.parseInt(txtMinSoba.getText().trim());
            if (min < 0) {
                errorMessage += "Broj soba ne moze biti negativan!";
                lblErrBrSoba.setVisible(true);
                lblErrBrSoba.setText("Broj soba ne moze biti negativan!");
            }
        }

        if (!txtMaxSoba.getText().equals("do")) {
            int max = Integer.parseInt(txtMaxSoba.getText().trim());
            if (max < 0) {
                errorMessage += "Broj soba ne moze biti negativan!";
                lblErrBrSoba.setVisible(true);
                lblErrBrSoba.setText("Broj soba ne moze biti negativan!");
            }
        }

        if (!txtMinSprat.getText().equals("od") && !txtMaxSprat.getText().equals("do")) {
            int min = Integer.parseInt(txtMinSprat.getText().trim());
            int max = Integer.parseInt(txtMaxSprat.getText().trim());
            if (min > max) {
                errorMessage += "Minimalni sprat ne sme biti veci od maksimalnog!\n";
                lblErrSprat.setVisible(true);
                lblErrSprat.setText("Minimalni sprat ne sme biti veci od maksimalnog!");
            }
        }

        if (!txtMinSprat.getText().equals("od")) {
            int min = Integer.parseInt(txtMinSprat.getText().trim());
            if (min < 0) {
                errorMessage += "Sprat ne moze biti negativan!";
                lblErrSprat.setVisible(true);
                lblErrSprat.setText("Sprat ne moze biti negativan!");
            }
        }

        if (!txtMaxSprat.getText().equals("do")) {
            int max = Integer.parseInt(txtMaxSprat.getText().trim());
            if (max < 0) {
                errorMessage += "Sprat ne moze biti negativan!";
                lblErrSprat.setVisible(true);
                lblErrSprat.setText("Sprat ne moze biti negativan!");
            }
        }

        if (!errorMessage.isEmpty()) {
            throw new Exception(errorMessage);
        }
    }

    private void osveziTabelu() {
        TableModelStan tms = (TableModelStan) tblStanovi.getModel();
        tms.fireTableDataChanged();
    }
}
